# -*- coding: utf-8 -*-
"""Synthetic data generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wZ7He5lU87liNF2acQrYpNCh95ufgNqx
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

# import numpy as np
# import pandas as pd
# from sklearn.preprocessing import OneHotEncoder

np.random.seed(42)
n_samples = 200  # Larger dataset for diversity

# ---- Numerical Parameters (Diverse Distributions) ----
engine_size = np.clip(np.random.lognormal(mean=0.5, sigma=0.3, size=n_samples), 1.0, 5.0)
cylinders = np.random.choice([3, 4, 6, 8], n_samples, p=[0.2, 0.5, 0.2, 0.1])
weight = np.clip(engine_size * 600 + np.random.normal(1000, 400, n_samples), 1000, 3500)
horsepower = np.clip(engine_size * 80 + (cylinders/4)*30 + np.random.normal(0, 30, n_samples), 70, 500)
torque = np.clip(horsepower * 1.5 + np.random.normal(0, 20, n_samples), 100, 600)
drag_coefficient = np.random.beta(a=2, b=5, size=n_samples) * 0.25 + 0.2  # Skewed toward lower drag
acceleration_time = np.clip(15 - (horsepower / 50) + (weight / 800) + np.random.normal(0, 3, n_samples), 5, 25)

# ---- Categorical Parameters (Realistic Distributions) ----
transmission = np.random.choice(['Manual', 'Automatic', 'CVT', 'DCT'], n_samples, p=[0.2, 0.5, 0.2, 0.1])
drivetrain = np.random.choice(['FWD', 'RWD', 'AWD'], n_samples, p=[0.6, 0.3, 0.1])
tire_type = np.random.choice(['LowRolling', 'AllTerrain', 'Performance'], n_samples, p=[0.6, 0.3, 0.1])
fuel_type = np.random.choice(['Gasoline', 'Diesel', 'Hybrid', 'Electric'], n_samples, p=[0.5, 0.2, 0.2, 0.1])
fuel_injection = np.random.choice(['Direct', 'Port', 'Carburetor'], n_samples, p=[0.7, 0.2, 0.1])
turbocharged = np.random.choice([0, 1], n_samples, p=[0.6, 0.4])
hybrid_system = np.where(fuel_type == 'Hybrid', 1, 0)  # Hybrid is mutually exclusive with Electric
hybrid_system = np.where(fuel_type == 'Electric', 0, hybrid_system)  # Electric cars don't have hybrid systems

# ---- MPG Calculation (Non-linear, Realistic Formula) ----
# Base MPG based on fuel type
mpg = np.zeros(n_samples)
mpg = np.where(fuel_type == 'Electric', 120, mpg)  # Electric "MPGe"
mpg = np.where(fuel_type == 'Hybrid', 50 + (hybrid_system * 10), mpg)
mpg = np.where(fuel_type == 'Diesel', 40 + (turbocharged * 5), mpg)
mpg = np.where(fuel_type == 'Gasoline', 30 + (turbocharged * 3), mpg)

# Penalties/Bonuses
mpg -= 0.04 * weight + 0.03 * horsepower + 2.5 * drag_coefficient * 10
mpg += np.where(transmission == 'CVT', 8, np.where(transmission == 'DCT', 5, np.where(transmission == 'Manual', 3, 0)))
mpg += np.where(tire_type == 'LowRolling', 5, np.where(tire_type == 'AllTerrain', -2, -5))
mpg += np.where(drivetrain == 'FWD', 3, np.where(drivetrain == 'RWD', 0, -4))
mpg += np.where(fuel_injection == 'Direct', 4, np.where(fuel_injection == 'Port', 0, -3))
mpg -= acceleration_time * 0.5  # Slower cars are more efficient

# Add noise and clip values
mpg += np.random.normal(0, 3, n_samples)
mpg = np.clip(mpg, 10, 120)  # Gasoline cars: 10-45, Diesel: 30-50, Hybrid: 40-70, Electric: 100-120

# ---- Create DataFrame ----
data = pd.DataFrame({
    'engine_size': np.round(engine_size, 1),
    'cylinders': cylinders,
    'horsepower': np.round(horsepower, 0),
    'torque': np.round(torque, 0),
    'weight': np.round(weight, 0),
    'drag_coefficient': np.round(drag_coefficient, 2),
    'acceleration_time': np.round(acceleration_time, 1),
    'transmission': transmission,
    'drivetrain': drivetrain,
    'tire_type': tire_type,
    'fuel_type': fuel_type,
    'fuel_injection': fuel_injection,
    'turbocharged': turbocharged,
    'hybrid_system': hybrid_system,
    'mpg': np.round(mpg, 1)
})

# ---- Realism Checks ----
# Ensure Electric cars have 0 cylinders and engines
data.loc[data['fuel_type'] == 'Electric', ['engine_size', 'cylinders']] = 0.0, 0
# Ensure Hybrid cars have engines
data.loc[data['fuel_type'] == 'Hybrid', 'cylinders'] = np.random.choice([4, 6], sum(data['fuel_type'] == 'Hybrid'))
# Ensure no turbocharged Electric cars
data.loc[data['fuel_type'] == 'Electric', 'turbocharged'] = 0

# Save
data.to_csv('highly_diverse_fuel_efficiency.csv', index=False)

import numpy as np
import pandas as pd

# Load your existing data
data = pd.read_csv('highly_diverse_fuel_efficiency.csv')

# Define base MPG ranges by fuel type (real-world benchmarks)
mpg_ranges = {
    'Gasoline': (15, 40),
    'Diesel': (25, 50),
    'Hybrid': (40, 70),
    'Electric': (80, 120)  # MPGe for electric
}

# Generate new MPG values based on fuel type with noise
new_mpg = []
for idx, row in data.iterrows():
    base_min, base_max = mpg_ranges[row['fuel_type']]

    # Base MPG with fuel-type adjustment
    mpg = np.random.uniform(base_min, base_max)

    # Penalties/Bonuses (simplified)
    mpg -= 0.03 * row['weight'] / 1000  # -3 MPG per 1000kg
    mpg -= 0.02 * row['horsepower'] / 100  # -2 MPG per 100HP
    mpg += 5 if row['transmission'] == 'CVT' else 0  # CVT bonus
    mpg += 3 if row['tire_type'] == 'LowRolling' else 0

    # Add noise and clip
    mpg += np.random.normal(0, 2)
    mpg = np.clip(mpg, 10, 120)

    new_mpg.append(round(mpg, 1))

# Update MPG column
data['mpg'] = new_mpg

# Save
data.to_csv('improved_fuel_efficiency.csv', index=False)

# Quick sanity check code
import pandas as pd
import seaborn as sns

data = pd.read_csv('improved_fuel_efficiency.csv')

# Check MPG distribution by fuel type
sns.boxplot(x='fuel_type', y='mpg', data=data)

# Verify electric vehicles
print(data[data['fuel_type'] == 'Electric'][['engine_size', 'cylinders', 'torque']].describe())

